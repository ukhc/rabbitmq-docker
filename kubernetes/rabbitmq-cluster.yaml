apiVersion: v1
kind: ServiceAccount
metadata:
  name: rabbitmq 

---

kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: endpoint-reader
rules:
- apiGroups: [""]
  resources: ["endpoints"]
  verbs: ["get"]
  
---

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: endpoint-reader
subjects:
- kind: ServiceAccount
  name: queue
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: endpoint-reader
  
---

kind: Service
apiVersion: v1
metadata:
  name: rabbitmq
  labels:
    app: rabbitmq
    type: LoadBalancer  
spec:
  type: NodePort
  ports:
   - name: http
     protocol: TCP
     port: 15672
     targetPort: 15672
     nodePort: 31672
   - name: amqp
     protocol: TCP
     port: 5672
     targetPort: 5672
     nodePort: 30672
  selector:
    app: rabbitmq
    
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: rabbitmq-config
data:
  enabled_plugins: |
      [rabbitmq_management,rabbitmq_peer_discovery_k8s].

  rabbitmq.conf: |
      ## Cluster formation. See https://www.rabbitmq.com/cluster-formation.html to learn more.
      cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
      cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
      ## Should RabbitMQ node name be computed from the pod's hostname or IP address?
      ## IP addresses are not stable, so using [stable] hostnames is recommended when possible.
      ## Set to "hostname" to use pod hostnames.
      ## When this value is changed, so should the variable used to set the RABBITMQ_NODENAME
      ## environment variable.
      cluster_formation.k8s.address_type = ip
      ## How often should node cleanup checks run?
      cluster_formation.node_cleanup.interval = 30
      ## Set to false if automatic removal of unknown/absent nodes
      ## is desired. This can be dangerous, see
      ##  * https://www.rabbitmq.com/cluster-formation.html#node-health-checks-and-cleanup
      ##  * https://groups.google.com/forum/#!msg/rabbitmq-users/wuOfzEywHXo/k8z_HWIkBgAJ
      cluster_formation.node_cleanup.only_log_warning = true
      cluster_partition_handling = autoheal
      ## See https://www.rabbitmq.com/ha.html#master-migration-data-locality
      queue_master_locator=min-masters
      ## See https://www.rabbitmq.com/access-control.html#loopback-users
      loopback_users.guest = false
      management.load_definitions = /etc/rabbitmq/definitions.json

  definitions.json: |
      {
        "users": [
          {
            "name": "guest",
            "password_hash": "QzwVcGIHKREa2mYoSWsMNURAA5/STbUewHVwlifjotbRnyXz",
            "hashing_algorithm": "rabbit_password_hashing_sha256",
            "tags": "administrator"
          }
        ],
        "vhosts": [
          {
            "name": "/"
          }
        ],
        "permissions": [
          {
            "user": "guest",
            "vhost": "/",
            "configure": ".*",
            "write": ".*",
            "read": ".*"
          }
        ],
        "topic_permissions": [
          
        ],
        "parameters": [
          
        ],
        "policies": [
          {
            "vhost": "/",
            "name": "HA Queues",
            "pattern": "^ha\\.",
            "apply-to": "queues",
            "definition": {
              "ha-mode": "exactly",
              "ha-params": 2,
              "ha-sync-mode": "automatic"
            },
            "priority": 0
          }
        ],
        "queues": [
          {
            "name": "ha.applogs_consumeErrors",
            "vhost": "/",
            "durable": true,
            "auto_delete": false,
            "arguments": {
              
            }
          },
          {
            "name": "ha.applogs",
            "vhost": "/",
            "durable": true,
            "auto_delete": false,
            "arguments": {
              
            }
          }
        ],
        "exchanges": [
          {
            "name": "ErrorExchange_AVAILABILITY",
            "vhost": "/",
            "type": "direct",
            "durable": true,
            "auto_delete": false,
            "internal": false,
            "arguments": {
              
            }
          },
          {
            "name": "ErrorExchange_CHANGE",
            "vhost": "/",
            "type": "direct",
            "durable": true,
            "auto_delete": false,
            "internal": false,
            "arguments": {
              
            }
          },
          {
            "name": "ErrorExchange_RESOURCE",
            "vhost": "/",
            "type": "direct",
            "durable": true,
            "auto_delete": false,
            "internal": false,
            "arguments": {
              
            }
          },
          {
            "name": "ErrorExchange_ACCESS",
            "vhost": "/",
            "type": "direct",
            "durable": true,
            "auto_delete": false,
            "internal": false,
            "arguments": {
              
            }
          },
          {
            "name": "applicationLogs",
            "vhost": "/",
            "type": "headers",
            "durable": true,
            "auto_delete": false,
            "internal": false,
            "arguments": {
              "alternate-exchange": "alt.applicationLogs"
            }
          },
          {
            "name": "alt.applicationLogs",
            "vhost": "/",
            "type": "headers",
            "durable": true,
            "auto_delete": false,
            "internal": false,
            "arguments": {
              
            }
          }
        ],
        "bindings": [
          {
            "source": "ErrorExchange_ACCESS",
            "vhost": "/",
            "destination": "ha.applogs_consumeErrors",
            "destination_type": "queue",
            "routing_key": "ACCESS",
            "arguments": {
              
            }
          },
          {
            "source": "ErrorExchange_AVAILABILITY",
            "vhost": "/",
            "destination": "ha.applogs_consumeErrors",
            "destination_type": "queue",
            "routing_key": "AVAILABILITY",
            "arguments": {
              
            }
          },
          {
            "source": "ErrorExchange_CHANGE",
            "vhost": "/",
            "destination": "ha.applogs_consumeErrors",
            "destination_type": "queue",
            "routing_key": "CHANGE",
            "arguments": {
              
            }
          },
          {
            "source": "ErrorExchange_RESOURCE",
            "vhost": "/",
            "destination": "ha.applogs_consumeErrors",
            "destination_type": "queue",
            "routing_key": "RESOURCE",
            "arguments": {
              
            }
          },
          {
            "source": "alt.applicationLogs",
            "vhost": "/",
            "destination": "ha.applogs",
            "destination_type": "queue",
            "routing_key": "",
            "arguments": {
              
            }
          }
        ]
      }
    
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: rabbitmq
spec:
  serviceName: rabbitmq
  replicas: 3
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      serviceAccountName: rabbitmq
      terminationGracePeriodSeconds: 10
      containers:        
      - name: rabbitmq
        image: rabbitmq:3.7.15
        volumeMounts:
          - name: config-volume
            mountPath: /etc/rabbitmq
        ports:
          - name: http
            protocol: TCP
            containerPort: 15672
          - name: amqp
            protocol: TCP
            containerPort: 5672
        livenessProbe:
          exec:
            command: ["rabbitmqctl", "status"]
          initialDelaySeconds: 60
          # See https://www.rabbitmq.com/monitoring.html for monitoring frequency recommendations.
          periodSeconds: 60
          timeoutSeconds: 15
        readinessProbe:
          exec:
            command: ["rabbitmqctl", "status"]
          initialDelaySeconds: 20
          periodSeconds: 60
          timeoutSeconds: 10
        imagePullPolicy: Always
        env:
          - name: MY_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: RABBITMQ_USE_LONGNAME
            value: "true"
          # See a note on cluster_formation.k8s.address_type in the config file section
          - name: RABBITMQ_NODENAME
            value: "rabbit@$(MY_POD_IP)"
          - name: K8S_SERVICE_NAME
            value: "rabbitmq"
          - name: RABBITMQ_ERLANG_COOKIE
            value: "CIsForCookieAndCookieIsForMe" 
#      imagePullSecrets:
#      - name: registry/registry-login-secret
      volumes:
        - name: config-volume
          configMap:
            name: rabbitmq-config
            items:
            - key: rabbitmq.conf
              path: rabbitmq.conf
            - key: enabled_plugins
              path: enabled_plugins
            - key: definitions.json
              path: definitions.json